วิเคราะห์ความต้องการของผู้ใช้ (User Requirement Analysis)
• ศึกษาปัญหาหรือความต้องการที่แท้จริงว่าจะแก้ปัญหาอะไรได้บ้าง
• ระบุประเภทของผู้ใช้ (ธุรกิจ, องค์กรไม่แสวงหากำไร, ส่วนบุคคล ฯลฯ)
• อธิบายว่าทำไมถึงต้องใช้ฐานข้อมูล (ข้อดี/สิ่งที่ได้จากการจัดเก็บแบบมีโครงสร้าง, ความจำเป็นที่ต้องจัดการข้อมูลจำนวนมากหรือต้องการความน่าเชื่อถือ)

ออกแบบ UML เบื้องต้น (Translate Requirements to UML)
• สร้าง Class Diagram: ระบุคลาสหลัก (Entity) ตามความต้องการที่วิเคราะห์ได้
– แสดงความสัมพันธ์ (Associations) ระหว่างคลาสต่าง ๆ เช่น 1:1, 1:N, N:M
– กำหนด Association Classes (ถ้ามีข้อมูล/คุณสมบัติที่เกี่ยวข้องเฉพาะความสัมพันธ์)
– ระบุ Super-Class และ Sub-Class ถ้ามีกรณีที่ต้องการแยกคลาสย่อยจากคลาสแม่
• ใช้เครื่องมือต่าง ๆ (เช่น Lucidchart, Draw.io) เพื่อวาดให้อ่านง่ายและครอบคลุม

แปลงจาก UML เป็นความสัมพันธ์ (UML to Relations)
• สร้างตาราง (Relation) สำหรับแต่ละคลาสหลัก
• ถ้ามีคลาสที่เป็น Association Class (เช่นมีแอตทริบิวต์เฉพาะของความสัมพันธ์) อาจจะต้องสร้างตารางแยกต่างหาก
• กำหนด Primary Key (PK), Foreign Key (FK) เพื่อเชื่อมตารางระหว่างกันตามความสัมพันธ์ใน UML

นอร์มัลไลซ์ข้อมูล (Normalization)
• ทบทวนโครงสร้างของตารางแต่ละตารางให้อยู่ใน 1NF -> 2NF -> 3NF
• ตรวจสอบว่าแต่ละแอตทริบิวต์ในตารางมีการบ่งชี้ชัดเจน และไม่มีข้อมูลซ้ำซ้อนกันเกินไป
• แสดงขั้นตอนนอร์มัลไลซ์ในรายงาน (อาจมีการแตกตารางหรือลดแอตทริบิวต์ซ้ำซ้อน เพื่อให้ข้อมูลสัมพันธ์กันอย่างเหมาะสม)

